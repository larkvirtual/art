# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
#image: gcc

stages:
  - build
  - test
#  - package

debian-build-debug:
  image: debian
  stage: build
  tags:
    - docker
  before_script:
    - apt update && apt -y install scons make libxml++2.6-dev g++
  script:
    - echo "Using '$(nproc)' processes to build source..."
    - cd src && scons RELEASE=0 -Q -j$(nproc)

debian-build-release:
  image: debian
  stage: build
  tags:
    - docker
  before_script:
    - apt update && apt -y install scons make libxml++2.6-dev g++
  script:
    - echo "Using '$(nproc)' processes to build source..."
    - cd src && scons RELEASE=1 -Q -j$(nproc)
  artifacts:
    paths:
      - src/artrepgen/artrepgen
      - src/artlibgen/src/artlibgen
  cache:
    paths:
      - "src/artrepgen/*.o"
      - "src/libs/libtplreader/*.o"
      - "src/artlibgen/src/*.o"
      - "src/.sconsign.dblite"
      - "src/config.log"

debian-test-file:
  image: debian
  stage: test
  tags:
    - docker
  before_script:
    - apt update && apt -y install gcc make libxml++2.6-2v5
  script:
    - cd regressions/features && make tracefile-method
  dependencies:
   - debian-build-release

debian-test-networked:
  image: debian
  stage: test
  tags:
    - docker
  before_script:
    - apt update && apt -y install gcc make libxml++2.6-2v5 patch
  script:
    - cd src/artlibgen/templates && make && cd ../../.. # to generate networked templates
    - cd regressions/features && make networked-method
  dependencies:
   - debian-build-release

#INCOMPLETE
#gentoo-build-debug:
  #image: gentoo/stage3-amd64
  #stage: build
  #tags:
    #- docker
 #before_script:
   #- apt update && apt -y install scons make libxml++2.6-dev g++
  #script:
    #- echo "Using '$(nproc)' processes to build source..."
    #- cd src && scons RELEASE=0 -Q -j$(nproc)

#gentoo-build-release:
  #image: gentoo/stage3-amd64
  #stage: build
  #tags:
    #- docker
  #before_script:
    #- env
    #- mkdir -p /var/db/repos/
    #- cd       /var/db/repos/
    #- wget -O portage.tar.xz https://mirror.yandex.ru/gentoo-distfiles/snapshots/portage-20210408.tar.xz
    #- tar xf  portage.tar.xz
    #- mv      portage gentoo
   #- emerge --getbinpkg --sync
   #- emerge -G dev-cpp/libxmlpp dev-util/pkgconfig
    #- emerge -v dev-cpp/libxmlpp dev-util/pkgconfig
#&& apt -y install scons make libxml++2.6-dev g++
  #script:
    #- echo "Using '$(nproc)' processes to build source..."
    #- cd /builds/restracer/restracer
    #- cd src && scons RELEASE=1 -Q -j$(nproc)
  #artifacts:
    #paths:
      #- src/artrepgen/artrepgen
      #- src/artlibgen/src/artlibgen
      #depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  #cache:
    #paths:
      #- "src/artrepgen/*.o"
      #- "src/libs/libtplreader/*.o"
      #- "src/artlibgen/src/*.o"
      #- "src/.sconsign.dblite"
      #- "src/config.log"

#run tests using the binary built before
#gentoo-test-file:
  #image: gentoo/stage3-amd64
  #stage: test
  #tags:
    #- docker
 #before_script:
   #- apt update && apt -y install gcc make libxml++2.6-2v5
  #script:
    #- cd regressions/features && make tracefile-method
  #dependencies:
   #- gentoo-build-release

#run tests using the binary built before
#gentoo-test-networked:
  #image: gentoo
  #stage: test
  #tags:
    #- docker
 #before_script:
   #- apt update && apt -y install gcc make libxml++2.6-2v5 patch
  #script:
    #- cd src/artlibgen/templates && make && cd ../../.. # to generate networked templates
    #- cd regressions/features && make networked-method
  #dependencies:
   #- gentoo-build-release

#INCOMPLETE
#arch-build-debug:
#  image: archlinux
#  stage: build
#  tags:
#    - docker
#  before_script:
#    - pacman -S libxml++
#  script:
#    - echo "Using '$(nproc)' processes to build source..."
#    - cd src && scons RELEASE=0 -Q -j$(nproc)

#arch-build-release:
  #image: archlinux
  #stage: build
  #tags:
    #- docker
  #before_script:
    #- pacman -S libxml++
  #script:
    #- echo "Using '$(nproc)' processes to build source..."
    #- cd src && scons RELEASE=1 -Q -j$(nproc)
  #artifacts:
    #paths:
      #- src/artrepgen/artrepgen
      #- src/artlibgen/src/artlibgen
  #cache:
    #paths:
      #- "src/artrepgen/*.o"
      #- "src/libs/libtplreader/*.o"
      #- "src/artlibgen/src/*.o"
      #- "src/.sconsign.dblite"
      #- "src/config.log"

#arch-test-file:
  #image: arch
  #stage: test
  #tags:
    #- docker
  #before_script:
    #- apt update && apt -y install gcc make libxml++2.6-2v5
  #script:
    #- cd regressions/features && make tracefile-method
  #dependencies:
   #- arch-build-release

#arch-test-networked:
  #image: arch
  #stage: test
  #tags:
    #- docker
  #before_script:
    #- apt update && apt -y install gcc make libxml++2.6-2v5 patch
  #script:
    #- cd src/artlibgen/templates && make && cd ../../.. # to generate networked templates
    #- cd regressions/features && make networked-method
  #dependencies:
   #- arch-build-release
